---
name: Reusable workflow


on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
        # For example "ubuntu-22.04" or "self-hosted"
      minimal_sample_size:
        required: true
        type: boolean
    secrets:
      GOOGLE_CREDS:
        required: true
      ASSETS:
        required: true

env:
  GOOGLE_CREDS: ${{ secrets.GOOGLE_CREDS }}
  ASSETS: ${{ secrets.ASSETS }}
  MINIMAL_SAMPLE_SIZE: ${{ inputs.MINIMAL_SAMPLE_SIZE }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  package-and-release:
    # The type of runner that the job will run on
    runs-on: ${{ inputs.runner }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Maximize build space
        if: ${{ inputs.runner != 'self-hosted' }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 1024
          remove-dotnet: 'true'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install nsis, wget and unzip
        run: sudo apt install -y nsis wget unzip p7zip-full git

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download 7-zip
        run: |
          wget https://www.7-zip.org/a/7z2201-extra.7z
          7z x 7z2201-extra.7z

      - name: Remove .env file
        run: rm .env

      - name: Install the newadvsplash plugin
        run: |
          wget https://nsis.sourceforge.io/mediawiki/images/c/cf/NewAdvSplash.zip
          unzip NewAdvSplash.zip
          sudo cp -r Contrib/NewAdvSplash             /usr/share/nsis/Contrib/
          sudo cp -r Plugins/newadvsplash.dll         /usr/share/nsis/Plugins/x86-ansi/
          sudo cp -r Unicode/plugins/newadvsplash.dll /usr/share/nsis/Plugins/x86-unicode/

      - name: Install the nsis-nscurl plugin
        run: |
          mkdir nscurl
          cd nscurl
          wget https://github.com/negrutiu/nsis-nscurl/releases/download/v1.2023.10.11/NScurl-1.2023.10.11.7z
          7z x NScurl-1.2023.10.11.7z
          sudo mkdir -p /usr/share/nsis/Contrib/amd64-unicode
          sudo cp -r x86-ansi/NScurl.dll         /usr/share/nsis/Plugins/x86-ansi/
          sudo cp -r x86-unicode/NScurl.dll      /usr/share/nsis/Plugins/x86-unicode/
          sudo cp -r amd64-unicode/NScurl.dll    /usr/share/nsis/Contrib/amd64-unicode/

      - name: Install pipenv
        run: python -m pip install pipenv

      - name: sync pipenv
        run: pipenv sync

      - name: credentials.json
        run: echo "$GOOGLE_CREDS" > credentials.json

      - name: assets.yml
        run: echo "$ASSETS" > assets.yml

      - name: Run the downloader
        run: pipenv run python rs_liveries_downloader.py

      - uses: actions/upload-artifact@v3
        with:
          name: Rendered scripts
          path: |
            Staging/*.nsi
            Staging/*.ps1

      - uses: actions/upload-artifact@v3
        with:
          name: Checksums
          path: |
            Staging/Checksums/*.sha256sum

      - name: Package to Exe installer (release)
        if: ${{ inputs.runner != 'self-hosted' }}
        run: |
          cd Staging
          makensis -V4 -DVERSION=$GITHUB_REF rs-liveries-rendered.nsi
          mv "RS Liveries.exe" "RS_Liveries_$GITHUB_REF_NAME.exe"

      - name: Package to Exe installer (non-main release)
        if: ${{ inputs.runner == 'self-hosted' }}
        run: |
          cd Staging
          makensis -V4 -DVERSION=$GITHUB_REF rs-liveries-rendered.nsi
          mv "RS Liveries.exe" "RS_Liveries_testing.exe"

      - name: Create 'testing' tag (non-main release)
        if: ${{ inputs.runner == 'self-hosted' }}
        uses: EndBug/latest-tag@latest
        with:
          # You can change the name of the tag or branch with this input.
          # Default: 'latest'
          ref: testing

      - name: Delete testing release (non-main release)
        if: ${{ inputs.runner == 'self-hosted' }}
        uses: cb80/delrel@latest
        with:
          tag: testing

      - name: Create a "testing" release (non-main release)
        if: ${{ inputs.runner == 'self-hosted' }}
        uses: ncipollo/release-action@v1
        with:
          prerelease: true
          tag: testing
          makeLatest: false
          body: "DO NOT USE"
          name: "testing - do not use"

      - name: Upload Assets to Github Releases (non-main release)
        uses: softprops/action-gh-release@v1
        if: ${{ inputs.runner == 'self-hosted' }}
        with:
          tag_name: testing
          files: |
            Staging/RS_Liveries_testing.exe
            Compressed/*.7z

      - name: Upload Assets to Github Releases (main release)
        uses: softprops/action-gh-release@v1
        if: ${{ inputs.runner != 'self-hosted' && inputs.minimal_sample_size == false }}
        with:
          files: |
            Staging/RS_Liveries_${{ github.ref_name }}.exe
            Compressed/*.7z
